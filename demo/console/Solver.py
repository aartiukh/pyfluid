from algorithms.r_functions.logical_operations import *
from algorithms.coord_functions.spline import *
import sympy as sp

a = 1
b = 1
nu = 1
T = 5

spline = Spline(6, 15, a, b)

x, y, t = sp.symbols('x y t')


def normfi():
    normafi = [2.310128768291188e-11, 1.7792717483044317e-9,1.3001628560385831e-8, 2.7241119219355775e-8, 3.284728303013347e-8, 3.460802853605289e-8, \
               3.529444571097479e-8, 3.548535132957776e-8, 3.5294445710974784e-8, 3.4608028536052904e-8, 3.284728303013346e-8, 2.7241119219355772e-8, \
               1.3001628560385836e-8, 1.779271748304443e-9,2.3101287682916975e-11, 1.7792717483044317e-9,1.643529408651131e-7, 1.4016150689503276e-6, \
               3.4144278137256576e-6, 4.549892222176362e-6,5.006241718621055e-6, 5.196853923376294e-6,5.2509250921600265e-6, 5.196853923376293e-6, \
               5.006241718621057e-6, 4.549892222176359e-6,3.4144278137256564e-6, 1.4016150689503287e-6,1.6435294086511452e-7, 1.7792717483048384e-9, \
               1.3001628560385831e-8, 1.4016150689503279e-6,0.000013635811157873874, 0.00003782597162118176,0.00005541958762943291, 0.00006394096304574722, \
               0.00006776233426327959, 0.00006887170122387999,0.00006776233426327958, 0.00006394096304574726,0.00005541958762943289, 0.00003782597162118176, \
               0.000013635811157873886, 1.401615068950343e-6,1.3001628560388678e-8, 2.7241119219355772e-8,3.4144278137256572e-6, 0.00003782597162118176, \
               0.00011938228868238593, 0.00019335487647466327,0.0002358412821117456, 0.0002564403448490122,0.0002625902651792965, 0.0002564403448490122, \
               0.0002358412821117457, 0.0001933548764746632,0.0001193822886823859, 0.00003782597162118179,3.414427813725704e-6, 2.7241119219361096e-8, \
               3.284728303013347e-8, 4.549892222176362e-6,0.00005541958762943292, 0.00019335487647466327,0.0003408930123908224, 0.0004380957820413345, \
               0.0004887888018852952, 0.0005043631708412847,0.000488788801885295, 0.0004380957820413347,0.0003408930123908223, 0.00019335487647466327, \
               0.00005541958762943297, 4.5498922221764355e-6,3.284728303013912e-8, 3.46080285360529e-8,5.006241718621054e-6, 0.00006394096304574724, \
               0.0002358412821117456, 0.0004380957820413345,0.0005834794913418602, 0.000663382933490155,0.0006884856331324624, 0.0006633829334901548, \
               0.0005834794913418605, 0.00043809578204133436,0.00023584128211174557, 0.00006394096304574729,5.006241718621142e-6, 3.460802853605843e-8, \
               3.52944457109748e-8, 5.1968539233762935e-6,0.00006776233426327959, 0.0002564403448490123,0.0004887888018852952, 0.000663382933490155, \
               0.0007621549672239718, 0.0007935913180879233,0.0007621549672239716, 0.0006633829334901553,0.000488788801885295, 0.0002564403448490122, \
               0.00006776233426327967, 5.196853923376389e-6,3.529444571098027e-8, 3.548535132957775e-8, 5.2509250921600265e-6, 0.00006887170122387999, \
               0.0002625902651792965, 0.0005043631708412847,0.0006884856331324624, 0.0007935913180879233,0.0008271828118504165, 0.0007935913180879229, \
               0.0006884856331324628, 0.0005043631708412844,0.00026259026517929643, 0.00006887170122388007,5.250925092160125e-6, 3.54853513295832e-8, \
               3.529444571097479e-8, 5.1968539233762935e-6, 0.00006776233426327958, 0.00025644034484901217,0.000488788801885295, 0.0006633829334901548, \
               0.0007621549672239716, 0.000793591318087923,0.0007621549672239714, 0.0006633829334901551,0.0004887888018852949, 0.00025644034484901217, \
               0.00006776233426327966, 5.196853923376388e-6,3.5294445710980257e-8, 3.460802853605291e-8,5.006241718621058e-6, 0.00006394096304574726, \
               0.00023584128211174573, 0.00043809578204133463,0.0005834794913418606, 0.0006633829334901553,0.0006884856331324628, 0.0006633829334901551, \
               0.0005834794913418608, 0.0004380957820413346,0.00023584128211174567, 0.00006394096304574733,5.006241718621145e-6, 3.460802853605844e-8, \
               3.284728303013346e-8, 4.54989222217636e-6,0.00005541958762943289, 0.00019335487647466324,0.0003408930123908223, 0.00043809578204133436, \
               0.000488788801885295, 0.0005043631708412846, 0.0004887888018852949, 0.0004380957820413346,0.0003408930123908222, 0.00019335487647466316, \
               0.00005541958762943295, 4.549892222176434e-6,3.2847283030139104e-8, 2.7241119219355772e-8,3.4144278137256572e-6, 0.00003782597162118176, \
               0.0001193822886823859, 0.00019335487647466327,0.00023584128211174557, 0.0002564403448490122,0.00026259026517929643, 0.0002564403448490121, \
               0.00023584128211174567, 0.00019335487647466318,0.0001193822886823859, 0.00003782597162118179,3.4144278137257042e-6, 2.7241119219361106e-8, \
               1.3001628560385838e-8, 1.4016150689503287e-6, 0.000013635811157873888, 0.00003782597162118179, 0.000055419587629432966, 0.00006394096304574729, \
               0.00006776233426327967, 0.00006887170122388007,0.00006776233426327966, 0.00006394096304574733,0.000055419587629432946, 0.00003782597162118179, \
               0.000013635811157873898, 1.4016150689503442e-6,1.3001628560388688e-8, 1.779271748304443e-9,1.643529408651145e-7, 1.401615068950343e-6, \
               3.414427813725704e-6, 4.5498922221764355e-6,5.006241718621142e-6, 5.196853923376389e-6,5.250925092160124e-6, 5.196853923376388e-6, \
               5.006241718621145e-6, 4.549892222176434e-6,3.4144278137257042e-6, 1.401615068950344e-6,1.6435294086511592e-7, 1.7792717483048498e-9, \
               2.310128768291698e-11, 1.7792717483048386e-9,1.300162856038868e-8, 2.72411192193611e-8, 3.284728303013912e-8, 3.460802853605842e-8, \
               3.529444571098026e-8, 3.54853513295832e-8,3.5294445710980257e-8, 3.460802853605844e-8, 3.2847283030139104e-8, 2.7241119219361106e-8, \
               1.3001628560388686e-8, 1.77927174830485e-9,2.310128768292207e-11]
    return normafi


def omega(x, y):
    return conjunction(0, x * (a - x) / a, y * (b - y) / b)


def omega_d1x_sym(x, y):
    return diff(omega(x, y), x)


omega_d1x = lambdify((x, y), omega_d1x_sym(x, y), "numpy")


def omega_d2x_sym(x, y):
    return diff(omega(x, y), x, 2)


omega_d2x = lambdify((x, y), omega_d2x_sym(x, y), "numpy")


def omega_d1y_sym(x, y):
    return diff(omega(x, y), y)


omega_d1y = lambdify((x, y), omega_d1y_sym(x, y), "numpy")


def omega_d2y_sym(x, y):
    return diff(omega(x, y), y, 2)


omega_d2y = lambdify((x, y), omega_d2y_sym(x, y), "numpy")


def f(x, y, t):
    return 0.


def f_d1x_sym(x, y, t):
    return diff(f(x, y, t), x)


f_d1x = lambdify((x, y, t), f_d1x_sym(x, y, t), "numpy")


def f_d1y_sym(x, y, t):
    return diff(f(x, y, t), y)


f_d1y = lambdify((x, y, t), f_d1y_sym(x, y, t), "numpy")


def g(xx, yy, tt):
    return ((sp.exp(-tt) - 1) * conjunction(0, (1 - xx) * xx, yy)) / (1 - yy + conjunction(0, (1 - xx) * xx, yy))


def fifi(xx, yy, tt):
    return f(xx, yy, tt) - \
           omega(xx, yy) * (omega_d1x(xx, yy) * f_d1x(xx, yy, tt) +
                            omega_d1y(xx, yy) * f_d1y(xx, yy, tt) + g(xx, yy, tt))


def fi1(k, x, y):
    return omega(x, y) * omega(x, y) * spline.spline(k, x, y)


def f1(k, x, y):
    return fi1(k, x, y) / normfi()[k - 1]


def fi_d1x(k, x, y):
    return 1 / normfi()[k - 1] * ((2 * omega(x, y) * omega_d1x(x, y) * spline.spline(k, x, y))
                                          + (omega(x, y) * omega(x, y) * spline.d1x(k, x, y)))


def fi_d1y(k, x, y):
    return 1 / normfi()[k - 1] * ((2 * omega(x, y) * omega_d1y(x, y) * spline.spline(k, x, y))
                                          + (omega(x, y) * omega(x, y) * spline.d1y(k, x, y)))


def fi_d2x(k, x, y):
    return 1 / normfi()[k - 1] * (2 * (omega_d1x(x, y) * omega_d1x(x, y) + omega(x, y) * omega_d2x(x, y)) *
                                          spline.spline(k, x, y) + 4 * omega(x, y) * omega_d1x(x, y) *
                                          spline.d1x(k, x, y) + omega(x, y) * omega(x, y) * spline.d2x(k, x, y))


def fi_d2y(k, x, y):
    return 1 / normfi()[k - 1] * (2 * (omega_d1y(x, y) * omega_d1y(x, y) + omega(x, y) * omega_d2y(x, y)) *
                                          spline.spline(k, x, y) + 4 * omega(x, y) * omega_d1y(x, y) *
                                          spline.d1y(k, x, y) + omega(x, y) * omega(x, y) * spline.d2y(k, x, y))


def solve():
    print(spline.spline(130, 0.6, 0.53))

if __name__ == '__main__':
    solve()
